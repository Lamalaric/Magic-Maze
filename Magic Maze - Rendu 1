#------------------------- Import -------------------------------
import os
import time
from upemtk import *


#------------------------- Fonctions ----------------------------

# ----- Partie Logique -----

def creationMap(l, L) :


	global nbCasesX, nbCasesY, Plateau, largeur
	
	nbCasesX = l
	nbCasesY = L
	largeur = 50		# Largeur des carrés

	cree_fenetre((nbCasesX*largeur+1), (nbCasesY*largeur + 100))		# Création de la fenêtre

	
	Plateau = []
	# Création de la matrice
	for yAxes in range(nbCasesY):
		Plateau.append([])

		for xAxes in range(nbCasesX):
			Plateau[yAxes].append(0)



def creationPion():

	global midX, midY

	midX = len(Plateau[0]) // 2 -1		# On stock où est la moitié de l'axe X
	midY = len(Plateau) // 2			# On stock où est la moitié de l'axe Y

	# On définit l'emplacement initial de chaque pion
	Plateau[midY-1][midX] = 1
	Plateau[midY-1][midX+1] = 2
	Plateau[midY][midX] = 3
	Plateau[midY][midX+1] = 4




# ----- Partie visuelle -----

def affichage() :
	"""
		Actualise l'affichage en fonction de chaque élément dans la matrice.
		Si l'elem. de la matrice est 0 : on affiche un simple rectangle.
		Si l'elem. de la matrice est 1, 2, 3, 4 : c'est un pion donc on affiche un rond avec sa couleur correspondante.
		Si l'elem. de la matrice est 5 : c'est un objet donc on affiche un carré avec sa couleur correspondante
	"""


	x, y = 0, 0
	for yAxes in range(nbCasesY):
		for xAxes in range(nbCasesX):
			rectangle(x, y, x+largeur, y+largeur, remplissage = 'light grey')

			if Plateau[yAxes][xAxes] == 1 : 
				cercle(xAxes*largeur-largeur/2+largeur, yAxes*largeur-largeur/2+largeur, 20, remplissage = 'blue')

			if Plateau[yAxes][xAxes] == 2 : 
				cercle(xAxes*largeur-largeur/2+largeur, yAxes*largeur-largeur/2+largeur, 20, remplissage = 'green')

			if Plateau[yAxes][xAxes] == 3 : 
				cercle(xAxes*largeur-largeur/2+largeur, yAxes*largeur-largeur/2+largeur, 20, remplissage = 'yellow')

			if Plateau[yAxes][xAxes] == 4 : 
				cercle(xAxes*largeur-largeur/2+largeur, yAxes*largeur-largeur/2+largeur, 20, remplissage = 'red')

			x += largeur

		x = 0
		y += largeur



def timer(temps,seconde, startTime) :
    minutesLeft = temps
    secondeLeft= seconde


    secElapsed = int((time.time() - startTime))                 # Secondes écoulées depuis le début du programme
    
    if (secondeLeft - secElapsed)<0 :
        minutesLeft -= 1
        secondeLeft = 62
        startTime = time.time()
    timeLeft = minutesLeft, ':', (secondeLeft - secElapsed)     # Stock le temps restant

       
    efface(timer)                                               # Effacer l'ancien temps            
    texte(30, 715, timeLeft, couleur="red", tag = "timer")       # Affiche le nouveau temps
    

    # Si le temps ombe à 0 == c'est perdu
    if timeLeft== (0,':',0):
        texte(123,750,'Partie perdu', couleur='red', taille = 35)
        return

    if timeLeft==(-1,':',59):
        time.sleep(3)
        ferme_fenetre()



def choixPion():

	touche = attente_touche_jusqua(1000)

	if touche == 's' :
		touche2 = attente_touche_jusqua(1000)

		if touche2 == 'b' :
			a=0
		if touche2 == 'g' :
			a=0# Actions pion Vert
		if touche2 == 'y' :
			a=0# Actions pion Jaune
		if touche2 == 'r' :
			a=0# Actions pion Rouge



def movePionB():

	dejaVu = False
	touche = attente_touche_jusqua(1000)
	print(touche)

	for yAxes in range(nbCasesY):
		for xAxes in range(nbCasesX):

			if Plateau[yAxes][xAxes] == 1 :
				if touche == 'Left':
					Plateau[yAxes][xAxes-1] = 1
					Plateau[yAxes][xAxes] = 0
					break

				if touche == 'Right':
					Plateau[yAxes][xAxes+1] = 1
					Plateau[yAxes][xAxes] = 0
					break

				if touche == 'Up':
					Plateau[yAxes-1][xAxes] = 1
					Plateau[yAxes][xAxes] = 0
					break

				if touche == 'Down':
					if dejaVu == False :
						Plateau[yAxes+1][xAxes] = 1
						Plateau[yAxes][xAxes] = 0
						dejaVu = True
					
					# si y'a un autre truc : tu fais ri-en.
					# si t'es au bout : tu fais ri-en.



def choixPion2(choix):

		switcher={
				'b': movePionB,
				# 'v': movePionV,
				# 'j': movePionJ,
				# 'r': movePionR,
			 }
		switcher.get(choix)
		print('vu')

def perdu():

	while 1 :
		texte((nbCasesX//2+1)*largeur, (nbCasesY//2-1)*largeur, "Partie perdue", couleur="red", ancrage = "center", taille = 45)
		attente_clic()
		break	
	ferme_fenetre()




#------------------------- Main Program -------------------------

if __name__ == '__main__':
	startTime = time.time()		# Secondes depuis 1970 (pour timer())


	creationMap(10,15)
	creationPion()
	
	a=0
	while 1:
		print(Plateau)

		affichage()
		timer(3, 30, startTime)
		
		movePionB()




		mise_a_jour()

		# print(a)
		# a+=1
		# if (a%5) == 0:
		# 	efface_tout()
		# 	print('fait')


		# if timeElapsed == 0 :
		# 	texte(perdu...)
		# 	break
