#------------------------- Import -------------------------------
import os
import time
from upemtk import *
from random import *

#------------------------- Fonctions ----------------------------


# ---------- Partie Logique ----------

def creationMap(l, L) :
	global nbCasesX, nbCasesY, largeur, Plateau 
	nbCasesX = l
	nbCasesY = L

	largeur = 50		# Largeur des carrés

	cree_fenetre((nbCasesX*largeur+75), (nbCasesY*largeur + 75))		# Création de la fenêtre

	Plateau = []
	# Création de la matrice
	for yAxes in range(nbCasesY):
		Plateau.append([])				# Dans chaque ligne du plateau
		for xAxes in range(nbCasesX):
			Plateau[yAxes].append(0)	# On met un 0, qui représente une case vide


def creationPion():
	"""
	Définit la position de départ de chaque pion sur le plateau.
	"""
	global midX, midY

	pionVisé = 1
	midX = len(Plateau[0]) // 2 -1		# On stock où est la moitié de l'axe X
	midY = len(Plateau) // 2			# On stock où est la moitié de l'axe Y

	# On définit l'emplacement initial de chaque pion
	Plateau[midY-1][midX] = 1
	Plateau[midY-1][midX+1] = 2
	Plateau[midY][midX] = 3
	Plateau[midY][midX+1] = 4


def creationObjet():
	"""
	Génère 4 objets dans la matrice.
	Chaque joueur doit récupérer son objet.
	"""
	obj = 11
	i = 0
	while i != 4:
		rdmY = randint(1,nbCasesY-1)
		rdmX = randint(1,nbCasesX-1)

		if Plateau[rdmY][rdmX] == 0 :
			Plateau[rdmY][rdmX] = obj
			i += 1
			obj += 1


def creationSortie():
	rdmY = randint(1,nbCasesY-1)
	rdmX = randint(1,nbCasesX-1)

	Plateau[rdmY][rdmX] = 5


def caseVide(n) : 
	"""
	Génère n cases vides dans la matrice.
	Les joueurs ne peuvent pas aller sur les cases vides.
	"""
	i = 0
	while i != n:
		rdmY = randint(1,nbCasesY-1)
		rdmX = randint(1,nbCasesX-1)

		if Plateau[rdmY][rdmX] == 0 :
			Plateau[rdmY][rdmX] = 6
			i += 1


def affiche_actions(i):
	# Affiche le carré de séléction
	cercle(nbCasesX*largeur +37, (nbCasesY*largeur)/2 - 2*largeur +i*largeur, 25, epaisseur = 2, couleur = 'red')
	# rectangle((i-1)*100+20, nbCasesY*largeur+50, (i-1)*100+80, nbCasesY*largeur+110, "red", "red")

	#Affiche les 4 carrés correspondant à chaque pion
	image(nbCasesX*largeur +37, (nbCasesY*largeur)/2 - 1*largeur, 'pions/transparent/warrior_transp.gif', ancrage = 'center')
	image(nbCasesX*largeur +37, (nbCasesY*largeur)/2, 'pions/transparent/wizzard_transp.gif', ancrage = 'center')
	image(nbCasesX*largeur +37, (nbCasesY*largeur)/2 + 1*largeur, 'pions/transparent/elf_transp.gif', ancrage = 'center')
	image(nbCasesX*largeur +37, (nbCasesY*largeur)/2 + 2*largeur -8, 'pions/transparent/dwarf_transp.gif', ancrage = 'center')


def selectionPion(pionChoisi):
	global pionVisé

	print(touche)

	if touche == 'a':
		pionVisé = pionChoisi
		pionVisé += 1
		if pionVisé > 4:
			pionVisé = 1

	return pionVisé


# ---------- Partie visuelle ----------

def affichage() :
	"""
		Actualise l'affichage en fonction de chaque élément dans la matrice.
		Si l'elem. de la matrice est 0 : c'est une case libre alors on affiche un simple rectangle.
		Si l'elem. de la matrice est 5 : c'est la sortie alors on affiche l'image correspondante.
		Si l'elem. de la matrice est 6 : c'est une case vide alors on affiche un rectangle foncé
		Si l'elem. de la matrice est 1, 2, 3, 4 : c'est un pion alors on affiche l'image correspondante.
		Si l'elem. de la matrice est 11,12,13,14 : c'est un objet alors on affiche l'image correspondante.
	"""
	x, y = 0, 0
	for yAxes in range(nbCasesY):
		locY = yAxes*largeur-largeur/2+largeur

		for xAxes in range(nbCasesX):
			locX = xAxes*largeur-largeur/2+largeur

			rectangle(x, y, x+largeur, y+largeur, remplissage = 'light grey')
			x += largeur


			if Plateau[yAxes][xAxes] == 1 :
				image(locX, locY, 'pions/Warrior_pion.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 2 : 
				image(locX, locY, 'pions/Wizzard_pion.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 3 : 
				image(locX, locY, 'pions/Elf_pion.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 4 : 
				image(locX, locY, 'pions/Dwarf_pion.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 5 : 
				image(locX+1, locY, 'sortie/vortex_transp.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 6 :
				rectangle(xAxes*largeur, yAxes*largeur, xAxes*largeur+largeur, yAxes*largeur+largeur, remplissage = 'dark grey')
				# image(locX, locY, 'hack.gif', ancrage = 'center')

			if Plateau[yAxes][xAxes] == 11 : 
				image(locX, locY, 'objets/transparent/sword_transp.gif', ancrage = 'center', tag = 'Objet Warrior')	

			if Plateau[yAxes][xAxes] == 12 : 
				image(locX, locY, 'objets/transparent/flask_transp.gif', ancrage = 'center', tag = 'Objet Wizzard')

			if Plateau[yAxes][xAxes] == 13 : 
				image(locX, locY, 'objets/transparent/bow_transp.gif', ancrage = 'center', tag = 'Objet Elf')

			if Plateau[yAxes][xAxes] == 14 : 
				image(locX, locY, 'objets/transparent/axe_transp.gif', ancrage = 'center', tag = 'Objet Dwarf')
		x = 0
		y += largeur




def movePion(player):
	global touche, pionVisé

	dejaVu = False
	touche = attente_touche_jusqua(1000)

	if touche == 'q' :
		ferme_fenetre()

	if touche == 'a' :
		pionVisé = selectionPion(pionVisé)

	# if touche != None :
	# 	efface_tout()


	for yAxes in range(nbCasesY):
		for xAxes in range(nbCasesX):

			if Plateau[yAxes][xAxes] == player :
				# Aller à gauche
				if touche == 'Left':
					if Plateau[yAxes][xAxes-1] == 0 and Plateau[yAxes][xAxes-1] is Plateau[yAxes][0]:			# Si case : vide, ET bord du plateau : False
						Plateau[yAxes][xAxes-1] = player
						Plateau[yAxes][xAxes] = 0
						break

				# Aller à droite
				if touche == 'Right':
					if xAxes < nbCasesX-1 :							# Tant qu'il est pas au dernier élement de la liste
						if Plateau[yAxes][xAxes+1] == 0:			# Si la case est vide
							print(Plateau[yAxes][xAxes+1])				
							Plateau[yAxes][xAxes+1] = player
							Plateau[yAxes][xAxes] = 0
							break

				# Aller en haut
				if touche == 'Up':
					if Plateau[yAxes-1][xAxes] == 0  and Plateau[yAxes-1][xAxes] is Plateau[0][xAxes]:			# Si case : vide, ET bord du plateau : False
						print(Plateau[yAxes-1][xAxes])
						Plateau[yAxes-1][xAxes] = player
						Plateau[yAxes][xAxes] = 0
						break

				# Aller en bas
				if touche == 'Down':
					if yAxes < nbCasesY-1 :							# Tant qu'il est pas à la dernière liste de la matrice
						if Plateau[yAxes+1][xAxes] == 0 :			# Si la case est vide
							if dejaVu == False :
								print(Plateau[yAxes+1][xAxes])			
								Plateau[yAxes+1][xAxes] = player
								Plateau[yAxes][xAxes] = 0
								dejaVu = True


def timer(temps,seconde, startTime) :
	minutesLeft = temps
	secondeLeft= seconde


	secElapsed = int((time.time() - startTime))                 # Secondes écoulées depuis le début du programme
	
	if (secondeLeft - secElapsed)<0 :
		minutesLeft -= 1
		secondeLeft = 62
		startTime = time.time()
	timeLeft = minutesLeft, ':', (secondeLeft - secElapsed)     # Stock le temps restant

	   
	efface(timer)                                               # Effacer l'ancien temps            
	texte(30, 750, secElapsed, couleur="red", tag = "timer")       # Affiche le nouveau temps
	

	# Si le temps ombe à 0 == c'est perdu
	if timeLeft== (0,':',0):
		texte(123,750,'Partie perdu', couleur='red', taille = 35)
		return

	if timeLeft==(-1,':',59):
		time.sleep(3)
		ferme_fenetre()


def perdu():

	while 1 :
		texte((nbCasesX//2+1)*largeur, (nbCasesY//2-1)*largeur, "Partie perdue", couleur="red", ancrage = "center", taille = 45)
		attente_clic()
		break	
	ferme_fenetre()


def instructions():
	texte()

#------------------------- Main Program -------------------------
if __name__ == '__main__':
	startTime = time.time()		# Secondes depuis 1970 (pour timer())

	creationMap(15,10)
	creationPion()
	creationObjet()
	creationSortie()
	caseVide(20)

	pionVisé = 1

	while 1:
		print(Plateau)

		timer(3, 30, startTime)
		affiche_actions(pionVisé)
		affichage()
		movePion(pionVisé)

		mise_a_jour()
		efface_tout()
